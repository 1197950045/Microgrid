# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-04-23 23:17
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DevControl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.CharField(max_length=20, unique=True, verbose_name='编号')),
                ('dev_type', models.IntegerField(choices=[(1, '光伏逆变器'), (2, '高压负荷开关'), (3, '隔离开关'), (4, '熔断器')], verbose_name='设备类型')),
                ('switch_status', models.IntegerField(blank=True, choices=[(1, '开'), (2, '关')], null=True, verbose_name='开关状态控制')),
                ('active_power', models.FloatField(blank=True, null=True, verbose_name='有功功率设置')),
                ('reactive_power', models.FloatField(blank=True, null=True, verbose_name='无功功率设置')),
                ('powerfactor', models.FloatField(blank=True, null=True, verbose_name='功率因素设置')),
            ],
            options={
                'verbose_name': '设备控制信息',
                'verbose_name_plural': '设备控制信息',
            },
        ),
        migrations.CreateModel(
            name='EnvAddressC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('env_num', models.CharField(max_length=20, unique=True, verbose_name='环境地址编号')),
            ],
            options={
                'verbose_name': '环境地址',
                'verbose_name_plural': '环境地址',
            },
        ),
        migrations.CreateModel(
            name='EnvAdress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('env_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='地址名')),
                ('remark', models.CharField(blank=True, max_length=200, null=True, verbose_name='备注')),
                ('env_num', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='microgrids.EnvAddressC', to_field='env_num', verbose_name='环境地址编号')),
            ],
            options={
                'verbose_name': '环境监测地址',
                'verbose_name_plural': '环境监测地址',
            },
        ),
        migrations.CreateModel(
            name='EnvironmentData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(blank=True, null=True, verbose_name='时间戳')),
                ('env_num', models.CharField(max_length=20, unique=True, verbose_name='环境地址编号')),
                ('wind_speed', models.FloatField(blank=True, null=True, verbose_name='风速(m/s)')),
                ('wind_direct', models.FloatField(blank=True, null=True, verbose_name='风向(°)')),
                ('env_temperature', models.FloatField(blank=True, null=True, verbose_name='环境温度(°C)')),
                ('env_temperature2', models.FloatField(blank=True, null=True, verbose_name='环境温度2(°C)')),
                ('env_humidity', models.FloatField(blank=True, null=True, verbose_name='环境湿度')),
                ('air_pressure', models.FloatField(blank=True, null=True, verbose_name='气压(hPa)')),
                ('period_rainfall', models.FloatField(blank=True, null=True, verbose_name='雨量时间间隔累计量(mm)')),
                ('period_sun', models.FloatField(blank=True, null=True, verbose_name='日照时间间隔累计量(mm)')),
                ('instant_total_radiation', models.FloatField(blank=True, null=True, verbose_name='总辐射瞬时值')),
                ('instant_scat_radiation', models.FloatField(blank=True, null=True, verbose_name='散辐射瞬时值')),
                ('instant_direct_radiation', models.FloatField(blank=True, null=True, verbose_name='直辐射瞬时值')),
                ('instant_net_radiation', models.FloatField(blank=True, null=True, verbose_name='净辐射瞬时值')),
                ('instant_photosynthetic_radiation', models.FloatField(blank=True, null=True, verbose_name='光合辐射瞬时值')),
                ('instant_ultraviolet_radiation', models.FloatField(blank=True, null=True, verbose_name='紫外辐射瞬时值')),
                ('period_total_radiation', models.FloatField(blank=True, null=True, verbose_name='总辐射时间间隔累计值')),
                ('period_scat_radiation', models.FloatField(blank=True, null=True, verbose_name='散辐射时间间隔累计值')),
                ('period_direct_radiation', models.FloatField(blank=True, null=True, verbose_name='直辐射时间间隔累计量')),
                ('period_net_radiation', models.FloatField(blank=True, null=True, verbose_name='净辐射时间间隔累计值')),
                ('period_photosynthetic_radiation', models.FloatField(blank=True, null=True, verbose_name='光合辐射时间间隔累计量')),
                ('period_ultraviolet_radiation', models.FloatField(blank=True, null=True, verbose_name='紫外辐射时间间隔累计值')),
            ],
            options={
                'verbose_name': '环境数据',
                'verbose_name_plural': '环境数据',
            },
        ),
        migrations.CreateModel(
            name='PVAnalogQuantityData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(blank=True, null=True, verbose_name='时间戳')),
                ('pv_num', models.CharField(max_length=20, unique=True, verbose_name='光伏逆变器编号')),
                ('matrix_cur', models.FloatField(blank=True, null=True, verbose_name='阵列电流')),
                ('matrix_volt', models.FloatField(blank=True, null=True, verbose_name='阵列电压')),
                ('matrix_power_in', models.FloatField(blank=True, null=True, verbose_name='阵列输入功率')),
                ('grid_volt_ab', models.FloatField(blank=True, null=True, verbose_name='电网AB线电压')),
                ('grid_volt_bc', models.FloatField(blank=True, null=True, verbose_name='电网BC线电压')),
                ('grid_volt_ca', models.FloatField(blank=True, null=True, verbose_name='电网CA线电压')),
                ('on_grid_cur_a', models.FloatField(blank=True, null=True, verbose_name='A相并网电流')),
                ('on_grid_cur_b', models.FloatField(blank=True, null=True, verbose_name='B相并网电流')),
                ('on_grid_cur_c', models.FloatField(blank=True, null=True, verbose_name='C相并网电流')),
                ('power_factor_a', models.FloatField(blank=True, null=True, verbose_name='A相功率因素')),
                ('power_factor_b', models.FloatField(blank=True, null=True, verbose_name='B相功率因素')),
                ('power_factor_c', models.FloatField(blank=True, null=True, verbose_name='C相功率因素')),
                ('grid_freq', models.FloatField(blank=True, null=True, verbose_name='电网频率')),
                ('on_grid_p', models.FloatField(blank=True, null=True, verbose_name='并网有功功率')),
                ('on_grid_q', models.FloatField(blank=True, null=True, verbose_name='并网无功功率')),
                ('on_grid_s', models.FloatField(blank=True, null=True, verbose_name='并网视在功率')),
                ('inv_cabin_temp', models.FloatField(blank=True, null=True, verbose_name='机柜温度')),
                ('day_gen_power', models.FloatField(blank=True, null=True, verbose_name='日累计发电量')),
                ('day_runtime', models.FloatField(blank=True, null=True, verbose_name='日运行时间')),
                ('total_gen_power', models.FloatField(blank=True, null=True, verbose_name='总累计发电量')),
                ('total_runtime', models.FloatField(blank=True, null=True, verbose_name='总运行时间')),
                ('co2_reduce', models.FloatField(blank=True, null=True, verbose_name='CO2减排量')),
                ('active_power', models.FloatField(blank=True, null=True, verbose_name='有功功率设置值')),
                ('reactive_power', models.FloatField(blank=True, null=True, verbose_name='无功功率设置值')),
                ('powerfactor', models.FloatField(blank=True, null=True, verbose_name='功率因素设定值')),
            ],
            options={
                'verbose_name': '光伏逆变器模拟量数据',
                'verbose_name_plural': '光伏逆变器模拟量数据',
            },
        ),
        migrations.CreateModel(
            name='PVDigitalQuantityData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(blank=True, null=True, verbose_name='时间戳')),
                ('pv_num', models.CharField(max_length=20, unique=True, verbose_name='光伏逆变器编号')),
                ('status', models.IntegerField(blank=True, choices=[(1, '停机'), (2, '待机'), (3, '自检'), (4, '并网')], null=True, verbose_name='设备状态')),
                ('locking_slef', models.IntegerField(blank=True, choices=[(1, '是'), (2, '否')], null=True, verbose_name='闭锁未自锁')),
                ('emergency_stop', models.IntegerField(blank=True, choices=[(1, '启动'), (2, '未启动')], null=True, verbose_name='急停')),
                ('remote_local', models.IntegerField(blank=True, choices=[(1, '是'), (2, '否')], null=True, verbose_name='远程本地')),
                ('reactive_power_compensation', models.IntegerField(blank=True, choices=[(1, '是'), (2, '否')], null=True, verbose_name='夜间无功补偿')),
                ('smoke_alarm', models.IntegerField(blank=True, choices=[(1, '正常'), (2, '异常')], null=True, verbose_name='烟感报警')),
                ('DC_lightning_protection', models.IntegerField(blank=True, choices=[(1, '正常'), (2, '异常')], null=True, verbose_name='直流防雷故障')),
                ('AC_lightning_protection', models.IntegerField(blank=True, choices=[(1, '正常'), (2, '异常')], null=True, verbose_name='交流防雷故障')),
                ('PV_reverse_connection', models.IntegerField(blank=True, choices=[(1, '是'), (2, '否')], null=True, verbose_name='PV反接')),
                ('PV_insulation_resistance', models.IntegerField(blank=True, choices=[(1, '正常'), (2, '异常')], null=True, verbose_name='PV对地绝缘阻抗')),
                ('DC_overvoltage', models.IntegerField(blank=True, choices=[(1, '是'), (2, '否')], null=True, verbose_name='直流过压')),
                ('power_voltage', models.IntegerField(blank=True, choices=[(1, '正常'), (2, '异常')], null=True, verbose_name='电网电压')),
                ('grid_frequency', models.IntegerField(blank=True, choices=[(1, '正常'), (2, '异常')], null=True, verbose_name='电网频率')),
                ('grid_reverse_order', models.IntegerField(blank=True, choices=[(1, '是'), (2, '否')], null=True, verbose_name='电网反序')),
                ('inverter_overload', models.IntegerField(blank=True, choices=[(1, '正常'), (2, '异常')], null=True, verbose_name='逆变器过载')),
                ('inverter_overheating', models.IntegerField(blank=True, choices=[(1, '正常'), (2, '异常')], null=True, verbose_name='逆变器过热')),
                ('inverter_short_circuit', models.IntegerField(blank=True, choices=[(1, '正常'), (2, '异常')], null=True, verbose_name='逆变器短路')),
                ('ambient_temperature_overheating', models.IntegerField(blank=True, choices=[(1, '正常'), (2, '异常')], null=True, verbose_name='环境温度过热')),
                ('island_protection', models.IntegerField(blank=True, choices=[(1, '启动'), (2, '未启动')], null=True, verbose_name='孤岛保护')),
            ],
            options={
                'verbose_name': '光伏逆变器数字量数据',
                'verbose_name_plural': '光伏逆变器数字量数据',
            },
        ),
        migrations.CreateModel(
            name='WebMicrogrid',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.CharField(max_length=20, unique=True, verbose_name='编号')),
                ('name', models.CharField(max_length=50, verbose_name='区域/设备/元件名')),
                ('remark', models.CharField(blank=True, max_length=200, null=True, verbose_name='备注')),
                ('TYPE', models.IntegerField(choices=[(1, '区域'), (2, '设备')], verbose_name='编号类型')),
                ('area_name', models.IntegerField(blank=True, choices=[(0, '总区'), (1, '光伏区'), (2, '风力区'), (3, '电池储能区'), (4, '控制区')], null=True, verbose_name='区域类别')),
                ('control_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sub2', to='microgrids.WebMicrogrid', to_field='num', verbose_name='控制区域所属')),
                ('parent_area', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sub', to='microgrids.WebMicrogrid', to_field='num', verbose_name='设备所属区域')),
            ],
            options={
                'verbose_name': '微电网设备web管理',
                'verbose_name_plural': '微电网设备web管理',
            },
        ),
    ]
